name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  check_suite:
    types: [completed]
  status: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  validate:
    name: Validate Code & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Check formatting (if prettier is available)
        run: |
          if [ -f "pnpm-lock.yaml" ] && pnpm list prettier &>/dev/null; then
            pnpm exec prettier --check .
          else
            echo "Prettier not configured, skipping format check"
          fi
        continue-on-error: true

      - name: Run ESLint (if available)
        run: |
          if [ -f "pnpm-lock.yaml" ] && pnpm list eslint &>/dev/null; then
            pnpm exec eslint .
          else
            echo "ESLint not configured, skipping lint check"
          fi
        continue-on-error: true

      - name: Type check
        run: pnpm run compile

      - name: Build for Chrome
        run: pnpm run build

      - name: Create Chrome zip
        run: pnpm run zip

      - name: Upload Chrome build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: .output/*-chrome.zip
          retention-days: 30

      - name: Upload build files
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .output/
          retention-days: 30

  auto-merge:
    name: Auto Merge
    runs-on: ubuntu-latest
    needs: validate
    if: >
      github.event_name == 'pull_request' &&
      github.event.pull_request.draft == false &&
      (
        github.actor == 'dependabot[bot]' ||
        contains(github.event.pull_request.labels.*.name, 'automerge')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto approve Dependabot PRs
        if: github.actor == 'dependabot[bot]'
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}

      - name: Wait for all checks to complete
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-checks
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Validate Code & Build"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          timeoutSeconds: 600
          intervalSeconds: 10

      - name: Auto merge
        if: steps.wait-for-checks.outputs.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              merge_method: 'squash',
              commit_title: pullRequest.title,
              commit_message: pullRequest.body || ''
            });
